<?php

/**
 * @file
 * Acquia Commerce product module file.
 *
 * Provides base hooks to the product functionality of Acquia Commerce
 * connector.
 */

use Drupal\Core\Render\Element;

/**
 * Function to allow custom modules to add base fields for acm_sku entity type.
 *
 * @param array $fields
 *   An associative array containing field_machine_name as key and following
 *   data in value:
 *   - parent: (Required) Parent key in the array where to look for data.
 *   - label: (Required) Label to be used for admin forms and display.
 *   - description: Description of the field to be used in admin forms.
 *   - cardinality: Number of values allowed to be stored.
 *   - type: Type of the field.
 *   - weight: Default weight of the field in form and display.
 *   - configurable: Whether the field is part of configurable options.
 *   - visible_view: Whether the field should be visible while viewing content.
 *   - visible_form: Whether the field should be visible in form.
 *   - serialize: (Optional) Should the data be stored as serialized.
 *
 * @throws \Exception
 */
function acm_sku_add_base_fields(array $fields) {
  // Get the fields from config.
  $configFactory = \Drupal::configFactory()->getEditable('acm_sku.base_field_additions');
  $additionalFields = $configFactory->getRawData();

  // Initialise with array if required.
  $additionalFields = empty($additionalFields) || !is_array($additionalFields) ? [] : $additionalFields;

  foreach ($fields as $machine_name => $field) {
    // Confirm we have minimum required data available to create the fields.
    if (empty($field['label'])) {
      \Drupal::logger('acm_sku')->error('Unable to create field @machine_name because field label is empty.', ['@machine_name' => $machine_name]);
      continue;
    }

    // Check if the field is already available in config.
    if (isset($additionalFields[$machine_name])) {
      \Drupal::logger('acm_sku')->error('Field @machine_name already exists.', ['@machine_name' => $machine_name]);
      continue;
    }

    // Add the field to storedFields so we store them to config.
    $additionalFields[$machine_name] = $field;
  }

  // Store the fields in config.
  $configFactory->setData($additionalFields)->save();

  // Apply entity updates.
  \Drupal::service("entity.definition_update_manager")->applyUpdates();
}

/**
 * Implements hook_theme().
 */
function acm_sku_theme($existing, $type, $theme, $path) {
  return [
    'acm_sku' => [
      'render element' => 'elements',
    ],
    'sku_add_list' => [
      'variables' => [
        'content' => NULL,
      ],
    ],
    'acm_sku_price' => [
      'variables' => [
        'price' => NULL,
        'sku' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function acm_sku_preprocess_acm_sku(&$variables) {
  /** @var Drupal\acm\SKUInterface $sku */
  $sku = $variables['elements']['#acm_sku'];

  $variables['sku_entity'] = $sku;
  $variables['sku_url'] = $sku->toUrl();
  $variables['sku'] = [];

  foreach (Element::children($variables['elements']) as $key) {
    $variables['sku'][$key] = $variables['elements'][$key];
  }
}

/**
 * Format price value with currency.
 *
 * Default template: acm-sku-price.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - price: a price value.
 *   - sku: Object with SKU.
 */
function template_preprocess_acm_sku_price(array &$variables) {
  $variables['price_as_float'] = $variables['price'];
  // We have to cast back to float, otherwise PHP throws a warning.
  $variables['price'] = $variables['sku']->getNumberFormattedPrice();
}

/**
 * Prepares variables for list of available sku type templates.
 *
 * Default template: sku-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 */
function template_preprocess_sku_add_list(array &$variables) {
  if (!empty($variables['content'])) {
    /** @var \Drupal\acm_sku\Entity\SKUTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] = \Drupal::url('acm_sku.sku_add', ['acm_sku_type' => $type->id()]);
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function acm_sku_theme_suggestions_acm_sku(array $variables) {
  $suggestions = [];
  $sku = $variables['elements']['#acm_sku'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'acm_sku__' . $sanitized_view_mode;
  $suggestions[] = 'acm_sku__' . $sku->bundle();
  $suggestions[] = 'acm_sku__' . $sku->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'acm_sku__' . $sku->id();
  $suggestions[] = 'acm_sku__' . $sku->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function acm_sku_theme_suggestions_acm_sku_price(array $variables) {
  $suggestions = [];
  $sku = $variables['sku'];
  $sanitized_view_mode = $sku->getType();

  $suggestions[] = 'acm_sku_price__' . $sanitized_view_mode;
  $suggestions[] = 'acm_sku_price__' . $sku->bundle();
  $suggestions[] = 'acm_sku_price__' . $sku->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'acm_sku_price__' . $sku->id();
  $suggestions[] = 'acm_sku_price__' . $sku->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}
